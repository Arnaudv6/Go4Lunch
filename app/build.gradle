plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // id 'jacoco'
}

// kapt: kotlin annotations, for compiler (for Hilt, in this case)
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

// Allow references to generated code
kapt {
    correctErrorTypes true
}


android {
    compileSdk 31

    defaultConfig {
        applicationId "com.cleanup.go4lunch"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled = true  // LocalDateTime / java.time.ZonedDateTime
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding false
        dataBinding false
    }
    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled = true

    }
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:1.1.5")  // LocalDateTime...

    implementation 'org.osmdroid:osmdroid-android:6.1.11'

    implementation 'io.leonard:opening-hours-evaluator:1.3.0'

    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'com.squareup.okhttp3:okhttp:4.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.8.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'

    implementation 'com.google.dagger:hilt-android:2.38.1'
    kapt 'com.google.dagger:hilt-android-compiler:2.38.1'
    kapt 'com.google.dagger:hilt-compiler:2.38.1'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.collection:collection-ktx:'
    implementation 'androidx.fragment:fragment-ktx:1.3.6'
    // Provides lifecycle and coroutines scopes
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0-rc01"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.room:room-ktx:2.3.0'
    implementation "androidx.room:room-runtime:2.3.0"
    kapt "androidx.room:room-compiler:2.3.0"

    implementation 'androidx.sqlite:sqlite-ktx:2.1.0'
    implementation 'androidx.work:work-runtime-ktx:2.7.0'

    implementation 'androidx.test:core-ktx:1.4.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

// todo remove this if jacoco applies not to kotlin
android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.enabled = true
            html {
                destination htmlOutDir
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}

